{"version":3,"sources":["data/index.js","components/CleanTurns.js","components/StreetTurns.js","components/TrashTurns.js","App.js","serviceWorker.js","index.js"],"names":["data","CleanTurns","date","initialDate","selectedDate","useMemo","Date","timeDivider","currentPersonIndex","dayOfTheWeek","getDay","offset","setDate","getDate","Math","floor","currentPerson","people","className","StreetTurns","selectedDay","streetTurns","days","map","el","day","turnIndex","indexOf","monthInitialDay","getFullYear","getMonth","firstChosenDay","numberOfTheMonth","week","street","TrashTurns","startingDate","turns","trash","trashTurns","trashTurnIndex","length","turnObject","daysInMonth","shift","turn","i","key","initial","App","props","curDate","toISOString","substr","state","cleanInitialDate","trashInitialDate","event","this","setState","target","value","align","type","onChange","dateChanged","bind","defaultValue","min","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.445a9eac.chunk.js","sourcesContent":["import data from './data.json';\n\nexport default data;\n","import React, { useMemo } from 'react';\nimport data from '../data';\n\nconst CleanTurns = ({ date, initialDate }) => {\n\tconst selectedDate = useMemo(() => new Date(date), [date]);\n\n\tconst timeDivider = useMemo(() => 1000 * 60 * 60 * 24 * 7, []);\n\tconst currentPersonIndex = useMemo(() => {\n\t\tconst dayOfTheWeek = selectedDate.getDay();\n\t\tif(dayOfTheWeek !== 1) {\n\t\t\tconst offset = dayOfTheWeek - 1;\n\t\t\tselectedDate.setDate(selectedDate.getDate() - offset);\n\t\t}\n\n\t\treturn Math.floor(((selectedDate - new Date(initialDate)) / timeDivider) % 5);\n\t}, [selectedDate, initialDate, timeDivider]);\n\n\tconst currentPerson = useMemo(() => data.people[currentPersonIndex], [currentPersonIndex]);\n\n\treturn(\n\t\t<div className=\"container jumbotron clean-turns\">\n\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t<div className=\"col-md-4\">\n\t\t\t\t\t<p className=\"lead\">Turno delle pulizie: </p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-md-6\">\n\t\t\t\t\t<p className=\"h3\"><span className=\"badge badge-secondary clean-turns-badge\">{currentPerson}</span></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default CleanTurns;\n","import React, { useMemo } from 'react';\nimport data from '../data';\n\nconst StreetTurns = ({ date }) => {\n\tconst selectedDate = useMemo(() => new Date(date), [date]);\n\tconst selectedDay = useMemo(() => selectedDate.getDay() - 1, [selectedDate]);\n\n\tconst streetTurns = useMemo(() => data.streetTurns, []);\n\tconst days = useMemo(() => streetTurns.map((el) => el.day), [streetTurns]);\n\tconst turnIndex = useMemo(() => days.indexOf(selectedDay), [days, selectedDay]);\n\n\tconst monthInitialDay = useMemo(() =>\n\t\tnew Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1).getDay() - 1,\n\t\t[selectedDate]);\n\tconst firstChosenDay = useMemo(() => monthInitialDay > selectedDay ?\n\t\t7 - monthInitialDay + selectedDay + 1 :\n\t\tselectedDay - monthInitialDay + 1, [monthInitialDay, selectedDay]);\n\tconst numberOfTheMonth = useMemo(() =>\n\t\tturnIndex !== -1 && firstChosenDay + (7 * streetTurns[turnIndex].week),\n\t\t[firstChosenDay, streetTurns, turnIndex]);\n\n\treturn(\n\t\t<div className=\"container jumbotron street-turns\">\n\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t<div className=\"col-md-4\">\n\t\t\t\t\t<p className=\"lead\">Turno della lavastrada: </p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-md-6\">\n\t\t\t\t\t{turnIndex !== -1 && numberOfTheMonth === selectedDate.getDate() ?\n\t\t\t\t\t\t<p className=\"h3\">\n\t\t\t\t\t\t\t<span className=\"badge badge-secondary street-turns-badge\">{streetTurns[turnIndex].street}</span>\n\t\t\t\t\t\t</p> :\n\t\t\t\t\t\t<p className=\"lead\"> - </p>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default StreetTurns;\n","import React, { useMemo } from 'react';\nimport data from '../data';\n\nconst TrashTurns = ({ date, initialDate: startingDate }) => {\n\tconst timeDivider = 1000 * 60 * 60 * 24;\n\n\tconst turns = useMemo(() => data.trash, []);\n\tconst people = useMemo(() => data.people, []);\n\tconst trashTurns = useMemo(() => data.trashTurns, []);\n\n\tconst selectedDate = useMemo(() => new Date(date), [date]);\n\tconst initialDate = useMemo(() => new Date(startingDate), [startingDate]);\n\n\tconst trashTurnIndex = useMemo(() => {\n\t\tconst dayOfTheWeek = selectedDate.getDay() - 1;\n\t\treturn dayOfTheWeek === -1 ? trashTurns.length - 1 : dayOfTheWeek;\n\t}, [selectedDate, trashTurns]);\n\tconst turnObject = useMemo(() => trashTurns[trashTurnIndex], [trashTurns, trashTurnIndex]);\n\n\tlet daysInMonth = useMemo(() => new Date(selectedDate.getFullYear(),\n\t\tselectedDate.getMonth() + 1, 0).getDate(), [selectedDate]);\n\tconst shift = useMemo(() =>\n\t\tMath.floor((selectedDate - initialDate) / (timeDivider * daysInMonth)), [selectedDate, initialDate, timeDivider, daysInMonth]);\n\n\treturn(\n\t\t<div className={'container jumbotron trash-turns'}>\n\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t<div className=\"col-md-4\">\n\t\t\t\t\t<p className=\"lead\">Turni della spazzatura: </p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-md-6\">\n\t\t\t\t\t{selectedDate.getDay() - 1 === 5 ?\n\t\t\t\t\t\t<p className=\"lead\"> - </p> :\n\t\t\t\t\t\t(trashTurns[trashTurnIndex].length && trashTurns[trashTurnIndex].map((turn, i) => (\n\t\t\t\t\t\t\t<div key={i} className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t\t\t\t<div className=\"col-md-8\">\n\t\t\t\t\t\t\t\t\t<p className=\"h3\">{turns[turn].trash}:\n\t\t\t\t\t\t\t\t\t\t<span className={'badge badge-secondary trash' + turn + '-badge'}>\n\t\t\t\t\t\t\t\t\t\t\t{people[Math.floor(turns[turn].initial + shift) % 5]}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>))) || (\n\t\t\t\t\t\t\t\t<p className=\"h3\">{turns[turnObject].trash}:\n\t\t\t\t\t\t\t\t\t<span className={'badge badge-secondary trash' + turnObject + '-badge'}>\n\t\t\t\t\t\t\t\t\t\t{people[Math.floor(turns[turnObject].initial + shift) % 5]}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default TrashTurns;\n","import React from 'react';\n\nimport { CleanTurns, StreetTurns, TrashTurns } from './components';\n\nclass App extends React.Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst cleanInitialDate = '2019-11-11';\n\t\tconst trashInitialDate  = '2019-11-01';\n\n\t\tconst curDate = new Date().toISOString().substr(0, 10);\n\n\t\tthis.state = {\n\t\t\tdate: curDate,\n\t\t\tcurDate,\n\t\t\tcleanInitialDate,\n\t\t\ttrashInitialDate\n\t\t};\n\t}\n\n\tdateChanged(event) {\n\t\tthis.setState({ date: event.target.value });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App container\">\n\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t<div className=\"jumbotron col-12 wrapper\" align=\"center\">\n\t\t\t\t\t\t<h1 className=\"display-4\">Calendario Turni</h1>\n\t\t\t\t\t\t<hr className=\"my-4\"/>\n\t\t\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t\t\t<div className=\"col-md-4\">\n\t\t\t\t\t\t\t\t<p className=\"lead\">Data: </p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col-md-4\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\t\t\t\tonChange={this.dateChanged.bind(this)}\n\t\t\t\t\t\t\t\t\tdefaultValue={this.state.date}\n\t\t\t\t\t\t\t\t\tmin={this.state.curDate}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t<TrashTurns date={this.state.date} initialDate={this.state.trashInitialDate}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t<CleanTurns date={this.state.date} initialDate={this.state.cleanInitialDate}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t<StreetTurns date={this.state.date}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}