{"version":3,"sources":["data/index.js","components/CleanTurns.js","components/StreetTurns.js","components/TrashTurns.js","App.js","serviceWorker.js","index.js"],"names":["data","CleanTurns","date","useMemo","greenBathroom","blueBathroom","people","timeDivider","selectedDate","Date","useEffect","dayOfTheWeek","getDay","offset","setDate","getDate","currentPersonIndex","Math","floor","greenBathroomIndex","Object","values","includes","blueBathroomIndex","className","isNaN","StreetTurns","selectedDay","streetTurns","turnIndex","map","el","day","indexOf","numberOfTheMonth","monthInitialDay","getFullYear","getMonth","week","street","TrashTurns","turns","trash","trashTurns","trashTurnIndex","length","turnObject","shift","daysInMonth","initialDate","turn","i","key","initial","App","props","curDate","toISOString","substr","state","event","this","setState","target","value","align","type","onChange","dateChanged","bind","defaultValue","min","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e95c0d6.chunk.js","sourcesContent":["import data from './data.json';\n\nexport default data;\n","import React, { useEffect, useMemo } from 'react';\nimport data from '../data';\n\nconst initialDate = '2020-10-04';\n\nconst CleanTurns = ({ date }) => {\n\tconst {\n\t\tgreenBathroom,\n\t\tblueBathroom,\n\t\tpeople\n\t} = useMemo(() => data, []);\n\n\tconst timeDivider = useMemo(() => 1000 * 60 * 60 * 24 * 7, []);\n\n\tconst selectedDate = useMemo(() => new Date(date), [date]);\n\tuseEffect(() => {\n\t\tconst dayOfTheWeek = selectedDate.getDay();\n\t\tif(dayOfTheWeek !== 1) {\n\t\t\tconst offset = dayOfTheWeek - 1;\n\t\t\tselectedDate.setDate(selectedDate.getDate() - offset);\n\t\t}\n\t}, [selectedDate, timeDivider]);\n\n\tconst currentPersonIndex = useMemo(() => Math.floor(((selectedDate - new Date(initialDate)) / timeDivider) % 5),\n\t\t[selectedDate, timeDivider]);\n\n\tconst greenBathroomIndex = useMemo(() => {\n\t\tif (!Object.values(greenBathroom).includes(currentPersonIndex)) {\n\t\t\treturn greenBathroom[Math.floor((((selectedDate - new Date(initialDate)) / timeDivider) % 15))];\n\t\t}\n\t}, [greenBathroom, timeDivider, currentPersonIndex, selectedDate]);\n\n\tconst blueBathroomIndex = useMemo(() => {\n\t\tif (!Object.values(blueBathroom).includes(currentPersonIndex)) {\n\t\t\treturn blueBathroom[Math.floor((((selectedDate - new Date(initialDate)) / timeDivider) % 10))];\n\t\t}\n\t}, [blueBathroom, timeDivider, currentPersonIndex, selectedDate]);\n\n\treturn (\n\t\t<div className=\"container jumbotron clean-turns align-content-center\">\n\t\t\t<div className=\"row justify-content-center align-items-center align-content-center\">\n\t\t\t\t<div className=\"col-12 text-center\">\n\t\t\t\t\t<p className=\"lead\">Turno delle pulizie: </p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t<p className=\"h3\"><span className=\"badge badge-secondary clean-turns-badge\">{people[currentPersonIndex]}</span></p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-12 text-center\">\n\t\t\t\t\t<p className=\"h3 my-3 text-center\">\n\t\t\t\t\t\t<b>Pulire la cucina, pulire l'andito, spolverare</b>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{!isNaN(greenBathroomIndex) && (\n\t\t\t\t<div className=\"row justify-content-center align-items-center align-content-center\">\n\t\t\t\t<div className=\"col-12 text-center\">\n\t\t\t\t\t<p className=\"lead\">Pulizia bagno grande: </p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t<p className=\"h3\">\n\t\t\t\t\t\t<span className=\"badge badge-secondary clean-turns-badge\">\n\t\t\t\t\t\t\t{people[greenBathroomIndex]}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t)}\n\t\t\t{!isNaN(blueBathroomIndex) && (\n\t\t\t\t<div className=\"row justify-content-center align-items-center align-content-center\">\n\t\t\t\t\t<div className=\"col-12 text-center\">\n\t\t\t\t\t\t<p className=\"lead\">Pulizia bagno piccolo: </p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t\t<p className=\"h3\">\n\t\t\t\t\t\t<span className=\"badge badge-secondary clean-turns-badge\">\n\t\t\t\t\t\t\t{people[blueBathroomIndex]}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default CleanTurns;\n","import React, { useMemo } from 'react';\nimport data from '../data';\n\nconst StreetTurns = ({ date }) => {\n\tconst selectedDate = useMemo(() => new Date(date), [date]);\n\tconst selectedDay = useMemo(() => selectedDate.getDay() - 1, [selectedDate]);\n\n\tconst streetTurns = useMemo(() => data.streetTurns, []);\n\tconst turnIndex = useMemo(() => {\n\t\tconst days = streetTurns.map((el) => el.day);\n\t\treturn days.indexOf(selectedDay);\n\t}, [streetTurns, selectedDay]);\n\n\tconst numberOfTheMonth = useMemo(() => {\n\t\t\tconst monthInitialDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1).getDay() - 1;\n\t\t\tconst firstChosenDay = monthInitialDay > selectedDay ?\n\t\t\t\t7 - monthInitialDay + selectedDay + 1 :\n\t\t\t\tselectedDay - monthInitialDay + 1;\n\t\t\treturn turnIndex !== -1 && firstChosenDay + (7 * streetTurns[turnIndex].week);\n\t\t},\n\t\t[selectedDate, selectedDay, streetTurns, turnIndex]);\n\n\treturn (\n\t\t<div className=\"container jumbotron street-turns\">\n\t\t\t<div className=\"row justify-content-center align-items-center align-content-center\">\n\t\t\t\t<div className=\"col-12 text-center\">\n\t\t\t\t\t<p className=\"lead\">Turno della lavastrada: </p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t{turnIndex !== -1 && numberOfTheMonth === selectedDate.getDate() ?\n\t\t\t\t\t\t<p className=\"h3\">\n\t\t\t\t\t\t\t<span className=\"badge badge-secondary street-turns-badge\">{streetTurns[turnIndex].street}</span>\n\t\t\t\t\t\t</p> :\n\t\t\t\t\t\t<p className=\"lead\"> - </p>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default StreetTurns;\n","import React, { useMemo } from 'react';\nimport data from '../data';\n\nconst startingDate  = '2020-10-01';\n\nconst TrashTurns = ({ date }) => {\n\tconst { turns, people, trashTurns } = useMemo(() => ({\n\t\tturns: data.trash,\n\t\tpeople: data.people,\n\t\ttrashTurns: data.trashTurns\n\t}), []);\n\n\tconst selectedDate = useMemo(() => new Date(date), [date]);\n\n\tconst trashTurnIndex = useMemo(() => {\n\t\tconst dayOfTheWeek = selectedDate.getDay() - 1;\n\t\treturn dayOfTheWeek === -1 ? trashTurns.length - 1 : dayOfTheWeek;\n\t}, [selectedDate, trashTurns]);\n\tconst turnObject = useMemo(() => trashTurns[trashTurnIndex], [trashTurns, trashTurnIndex]);\n\n\tconst shift = useMemo(() => {\n\t\tconst timeDivider = 1000 * 60 * 60 * 24;\n\t\tconst daysInMonth = new Date(selectedDate.getFullYear(),\n\t\t\tselectedDate.getMonth() + 1, 0).getDate();\n\t\tconst initialDate = new Date(startingDate);\n\n\t\treturn Math.floor((selectedDate - initialDate) / (timeDivider * daysInMonth));\n\t}, [selectedDate]);\n\n\treturn (\n\t\t<div className=\"container jumbotron trash-turns\">\n\t\t\t<div className=\"row justify-content-center align-items-center align-content-center\">\n\t\t\t\t<div className=\"col-12 text-center\">\n\t\t\t\t\t<p className=\"lead\">Turni della spazzatura: </p>\n\t\t\t\t</div>\n\t\t\t\t<>\n\t\t\t\t\t{selectedDate.getDay() - 1 === 5 ?\n\t\t\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t\t\t<p className=\"lead\"> - </p>\n\t\t\t\t\t\t</div>:\n\t\t\t\t\t\t\t(trashTurns[trashTurnIndex].length && trashTurns[trashTurnIndex].map((turn, i) => (\n\t\t\t\t\t\t\t<div className=\"col-auto\" key={i}>\n\t\t\t\t\t\t\t\t<div className=\"row justify-content-center align-items-center align-content-center\">\n\t\t\t\t\t\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"h3\">{turns[turn].trash}:</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"h3\">\n\t\t\t\t\t\t\t\t\t\t\t<span className={'mx-2 badge badge-secondary trash' + turn + '-badge'}>\n\t\t\t\t\t\t\t\t\t\t\t\t{people[Math.floor(turns[turn].initial + shift) % 5]}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))) || (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"h3\">{turns[turnObject].trash}:</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"h3\">\n\t\t\t\t\t\t\t\t\t\t\t<span className={'mx-2 badge badge-secondary trash' + turnObject + '-badge'}>\n\t\t\t\t\t\t\t\t\t\t\t\t{people[Math.floor(turns[turnObject].initial + shift) % 5]}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{turnObject === 3 && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"h3 my-3 text-center\"><b>Conferire tra le 18/18:30</b></p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default TrashTurns;\n","import React from 'react';\n\nimport { CleanTurns, StreetTurns, TrashTurns } from './components';\n\nclass App extends React.Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst curDate = new Date().toISOString().substr(0, 10);\n\n\t\tthis.state = {\n\t\t\tdate: curDate,\n\t\t\tcurDate,\n\t\t};\n\t}\n\n\tdateChanged(event) {\n\t\tthis.setState({ date: event.target.value });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App container\">\n\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t<div className=\"jumbotron col-12 wrapper\" align=\"center\">\n\t\t\t\t\t\t<h1 className=\"h1\">Turni</h1>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div className=\"row justify-content-center align-items-center align-content-center\">\n\t\t\t\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t\t\t\t<p className=\"lead\">Data: </p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col-auto\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\t\t\t\tonChange={this.dateChanged.bind(this)}\n\t\t\t\t\t\t\t\t\tdefaultValue={this.state.date}\n\t\t\t\t\t\t\t\t\tmin={this.state.curDate}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.state.date === '' ? (\n\t\t\t\t\t<div className=\"jumbotron col-12 wrapper\" align=\"center\">\n\t\t\t\t\t\t<h1 className=\"display-6\">Nessuna data selezionata</h1>\n\t\t\t\t\t</div>\n\t\t\t\t): (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t\t\t<TrashTurns date={this.state.date} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t\t\t<CleanTurns date={this.state.date} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t\t\t\t<StreetTurns date={this.state.date} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}